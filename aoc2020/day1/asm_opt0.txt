[....]

0000000000007d10 <main::read::{{closure}}>:
        .map(|lres| lres.and_then(
    7d10:	48 83 ec 38          	sub    rsp,0x38
    7d14:	48 89 f8             	mov    rax,rdi
    7d17:	48 89 74 24 30       	mov    QWORD PTR [rsp+0x30],rsi
    7d1c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
    7d1f:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    7d24:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
    7d28:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
    7d2d:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
    7d31:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
    7d36:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
    7d3a:	48 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],rcx
    7d3f:	48 8d 74 24 08       	lea    rsi,[rsp+0x8]
    7d44:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    7d48:	e8 93 cb 00 00       	call   148e0 <core::result::Result<T,E>::and_then>
    7d4d:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
                )
    7d51:	48 83 c4 38          	add    rsp,0x38
    7d55:	c3                   	ret    
    7d56:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    7d5d:	00 00 00 

0000000000007d60 <main::part1>:

fn part1(vec : &Vec<u64>, target : u64) -> Result<u64, Error> {
    7d60:	48 81 ec c8 00 00 00 	sub    rsp,0xc8
    7d67:	48 89 f8             	mov    rax,rdi
    7d6a:	48 89 b4 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rsi
    7d71:	00 
    7d72:	48 89 94 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rdx
    7d79:	00 
    7d7a:	48 89 7c 24 78       	mov    QWORD PTR [rsp+0x78],rdi
    let (mut tail, mut head) : (usize, usize) = (0, vec.len() - 1);
    7d7f:	48 89 f7             	mov    rdi,rsi
    7d82:	48 89 54 24 70       	mov    QWORD PTR [rsp+0x70],rdx
    7d87:	48 89 74 24 68       	mov    QWORD PTR [rsp+0x68],rsi
    7d8c:	48 89 44 24 60       	mov    QWORD PTR [rsp+0x60],rax
    7d91:	e8 da 6c 00 00       	call   ea70 <alloc::vec::Vec<T>::len>
    7d96:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    7d9b:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    7da0:	48 2d 01 00 00 00    	sub    rax,0x1
    7da6:	0f 92 c1             	setb   cl
    7da9:	f6 c1 01             	test   cl,0x1
    7dac:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
    7db1:	0f 85 1e 02 00 00    	jne    7fd5 <main::part1+0x275>
    7db7:	48 c7 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],0x0
    7dbe:	00 00 00 00 00 
    7dc3:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
    7dc8:	48 89 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],rax
    7dcf:	00 
    7dd0:	48 8b 8c 24 90 00 00 	mov    rcx,QWORD PTR [rsp+0x90]
    7dd7:	00 
    7dd8:	48 89 8c 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rcx
    7ddf:	00 
    7de0:	48 8b 8c 24 98 00 00 	mov    rcx,QWORD PTR [rsp+0x98]
    7de7:	00 
    7de8:	48 89 8c 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rcx
    7def:	00 

    while tail < head {
    7df0:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    7df7:	00 
    7df8:	48 3b 84 24 88 00 00 	cmp    rax,QWORD PTR [rsp+0x88]
    7dff:	00 
    7e00:	72 23                	jb     7e25 <main::part1+0xc5>
    7e02:	31 f6                	xor    esi,esi
    7e04:	48 8d 05 a6 d3 00 00 	lea    rax,[rip+0xd3a6]        # 151b1 <str.2+0x21>
        if sum < target { tail += 1; continue; }

        return Ok(vec[tail] * vec[head]);
    }

    Err(Error::new(ErrorKind::NotFound, "Solution not found"))
    7e0b:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
    7e12:	00 
    7e13:	48 89 c2             	mov    rdx,rax
    7e16:	b9 12 00 00 00       	mov    ecx,0x12
    7e1b:	e8 40 b1 00 00       	call   12f60 <std::io::error::Error::new>
    7e20:	e9 87 01 00 00       	jmp    7fac <main::part1+0x24c>
    7e25:	48 8d 05 7c 4a 01 00 	lea    rax,[rip+0x14a7c]        # 1c8a8 <__do_global_dtors_aux_fini_array_entry+0x308>
        let sum = vec[tail] + vec[head];
    7e2c:	48 8b b4 24 80 00 00 	mov    rsi,QWORD PTR [rsp+0x80]
    7e33:	00 
    7e34:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    7e39:	48 89 c2             	mov    rdx,rax
    7e3c:	e8 3f 74 00 00       	call   f280 <<alloc::vec::Vec<T> as core::ops::index::Index<I>>::index>
    7e41:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    7e46:	48 8d 05 73 4a 01 00 	lea    rax,[rip+0x14a73]        # 1c8c0 <__do_global_dtors_aux_fini_array_entry+0x320>
    7e4d:	48 8b 4c 24 48       	mov    rcx,QWORD PTR [rsp+0x48]
    7e52:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
    7e55:	48 8b b4 24 88 00 00 	mov    rsi,QWORD PTR [rsp+0x88]
    7e5c:	00 
    7e5d:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    7e62:	48 89 54 24 40       	mov    QWORD PTR [rsp+0x40],rdx
    7e67:	48 89 c2             	mov    rdx,rax
    7e6a:	e8 11 74 00 00       	call   f280 <<alloc::vec::Vec<T> as core::ops::index::Index<I>>::index>
    7e6f:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
    7e74:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    7e79:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
    7e7e:	48 03 01             	add    rax,QWORD PTR [rcx]
    7e81:	0f 92 c2             	setb   dl
    7e84:	f6 c2 01             	test   dl,0x1
    7e87:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
    7e8c:	0f 85 61 01 00 00    	jne    7ff3 <main::part1+0x293>
    7e92:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    7e97:	48 89 84 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rax
    7e9e:	00 
    7e9f:	48 8b 4c 24 70       	mov    rcx,QWORD PTR [rsp+0x70]
        if sum > target { head -= 1; continue; }
    7ea4:	48 39 c8             	cmp    rax,rcx
    7ea7:	77 11                	ja     7eba <main::part1+0x15a>
    7ea9:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    7eae:	48 8b 4c 24 70       	mov    rcx,QWORD PTR [rsp+0x70]
        if sum < target { tail += 1; continue; }
    7eb3:	48 39 c8             	cmp    rax,rcx
    7eb6:	72 56                	jb     7f0e <main::part1+0x1ae>
    7eb8:	eb 31                	jmp    7eeb <main::part1+0x18b>
        if sum > target { head -= 1; continue; }
    7eba:	48 8b 84 24 88 00 00 	mov    rax,QWORD PTR [rsp+0x88]
    7ec1:	00 
    7ec2:	48 2d 01 00 00 00    	sub    rax,0x1
    7ec8:	0f 92 c1             	setb   cl
    7ecb:	f6 c1 01             	test   cl,0x1
    7ece:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
    7ed3:	0f 85 38 01 00 00    	jne    8011 <main::part1+0x2b1>
    7ed9:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
    7ede:	48 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rax
    7ee5:	00 
    7ee6:	e9 05 ff ff ff       	jmp    7df0 <main::part1+0x90>
    7eeb:	48 8d 05 16 4a 01 00 	lea    rax,[rip+0x14a16]        # 1c908 <__do_global_dtors_aux_fini_array_entry+0x368>
        return Ok(vec[tail] * vec[head]);
    7ef2:	48 8b b4 24 80 00 00 	mov    rsi,QWORD PTR [rsp+0x80]
    7ef9:	00 
    7efa:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    7eff:	48 89 c2             	mov    rdx,rax
    7f02:	e8 79 73 00 00       	call   f280 <<alloc::vec::Vec<T> as core::ops::index::Index<I>>::index>
    7f07:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    7f0c:	eb 3b                	jmp    7f49 <main::part1+0x1e9>
        if sum < target { tail += 1; continue; }
    7f0e:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    7f15:	00 
    7f16:	48 05 01 00 00 00    	add    rax,0x1
    7f1c:	0f 92 c1             	setb   cl
    7f1f:	f6 c1 01             	test   cl,0x1
    7f22:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
    7f27:	0f 85 02 01 00 00    	jne    802f <main::part1+0x2cf>
    7f2d:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    7f32:	48 89 84 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rax
    7f39:	00 
    7f3a:	eb aa                	jmp    7ee6 <main::part1+0x186>
    7f3c:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
}
    7f41:	48 81 c4 c8 00 00 00 	add    rsp,0xc8
    7f48:	c3                   	ret    
    7f49:	48 8d 05 d0 49 01 00 	lea    rax,[rip+0x149d0]        # 1c920 <__do_global_dtors_aux_fini_array_entry+0x380>
    7f50:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
        return Ok(vec[tail] * vec[head]);
    7f55:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
    7f58:	48 8b b4 24 88 00 00 	mov    rsi,QWORD PTR [rsp+0x88]
    7f5f:	00 
    7f60:	48 8b 7c 24 68       	mov    rdi,QWORD PTR [rsp+0x68]
    7f65:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
    7f6a:	48 89 c2             	mov    rdx,rax
    7f6d:	e8 0e 73 00 00       	call   f280 <<alloc::vec::Vec<T> as core::ops::index::Index<I>>::index>
    7f72:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    7f77:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    7f7c:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    7f81:	48 f7 21             	mul    QWORD PTR [rcx]
    7f84:	40 0f 90 c6          	seto   sil
    7f88:	40 f6 c6 01          	test   sil,0x1
    7f8c:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    7f90:	0f 85 b7 00 00 00    	jne    804d <main::part1+0x2ed>
    7f96:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
    7f9b:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
    7f9f:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
    7fa3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    7faa:	eb 90                	jmp    7f3c <main::part1+0x1dc>
    Err(Error::new(ErrorKind::NotFound, "Solution not found"))
    7fac:	48 8b 84 24 a0 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    7fb3:	00 
    7fb4:	48 8b 4c 24 78       	mov    rcx,QWORD PTR [rsp+0x78]
    7fb9:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
    7fbd:	48 8b 84 24 a8 00 00 	mov    rax,QWORD PTR [rsp+0xa8]
    7fc4:	00 
    7fc5:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
    7fc9:	48 c7 01 01 00 00 00 	mov    QWORD PTR [rcx],0x1
}
    7fd0:	e9 67 ff ff ff       	jmp    7f3c <main::part1+0x1dc>
    let (mut tail, mut head) : (usize, usize) = (0, vec.len() - 1);
    7fd5:	48 8d 3d 64 d1 00 00 	lea    rdi,[rip+0xd164]        # 15140 <str.0>
    7fdc:	48 8d 15 ad 48 01 00 	lea    rdx,[rip+0x148ad]        # 1c890 <__do_global_dtors_aux_fini_array_entry+0x2f0>
    7fe3:	48 8b 05 fe 4f 01 00 	mov    rax,QWORD PTR [rip+0x14ffe]        # 1cfe8 <core::panicking::panic>
    7fea:	be 21 00 00 00       	mov    esi,0x21
    7fef:	ff d0                	call   rax
    7ff1:	0f 0b                	ud2    
        let sum = vec[tail] + vec[head];
    7ff3:	48 8d 3d 76 d1 00 00 	lea    rdi,[rip+0xd176]        # 15170 <str.1>
    7ffa:	48 8d 15 a7 48 01 00 	lea    rdx,[rip+0x148a7]        # 1c8a8 <__do_global_dtors_aux_fini_array_entry+0x308>
    8001:	48 8b 05 e0 4f 01 00 	mov    rax,QWORD PTR [rip+0x14fe0]        # 1cfe8 <core::panicking::panic>
    8008:	be 1c 00 00 00       	mov    esi,0x1c
    800d:	ff d0                	call   rax
    800f:	0f 0b                	ud2    
        if sum > target { head -= 1; continue; }
    8011:	48 8d 3d 28 d1 00 00 	lea    rdi,[rip+0xd128]        # 15140 <str.0>
    8018:	48 8d 15 b9 48 01 00 	lea    rdx,[rip+0x148b9]        # 1c8d8 <__do_global_dtors_aux_fini_array_entry+0x338>
    801f:	48 8b 05 c2 4f 01 00 	mov    rax,QWORD PTR [rip+0x14fc2]        # 1cfe8 <core::panicking::panic>
    8026:	be 21 00 00 00       	mov    esi,0x21
    802b:	ff d0                	call   rax
    802d:	0f 0b                	ud2    
        if sum < target { tail += 1; continue; }
    802f:	48 8d 3d 3a d1 00 00 	lea    rdi,[rip+0xd13a]        # 15170 <str.1>
    8036:	48 8d 15 b3 48 01 00 	lea    rdx,[rip+0x148b3]        # 1c8f0 <__do_global_dtors_aux_fini_array_entry+0x350>
    803d:	48 8b 05 a4 4f 01 00 	mov    rax,QWORD PTR [rip+0x14fa4]        # 1cfe8 <core::panicking::panic>
    8044:	be 1c 00 00 00       	mov    esi,0x1c
    8049:	ff d0                	call   rax
    804b:	0f 0b                	ud2    
        return Ok(vec[tail] * vec[head]);
    804d:	48 8d 3d 3c d1 00 00 	lea    rdi,[rip+0xd13c]        # 15190 <str.2>
    8054:	48 8d 15 ad 48 01 00 	lea    rdx,[rip+0x148ad]        # 1c908 <__do_global_dtors_aux_fini_array_entry+0x368>
    805b:	48 8b 05 86 4f 01 00 	mov    rax,QWORD PTR [rip+0x14f86]        # 1cfe8 <core::panicking::panic>
    8062:	be 21 00 00 00       	mov    esi,0x21
    8067:	ff d0                	call   rax
    8069:	0f 0b                	ud2    
    806b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000008070 <main::part2>:

fn part2(vec : &Vec<u64>, target : u64) -> Result<u64, Error> {
    8070:	48 81 ec c8 00 00 00 	sub    rsp,0xc8
    8077:	48 89 f8             	mov    rax,rdi
    807a:	48 89 74 24 40       	mov    QWORD PTR [rsp+0x40],rsi
    807f:	48 89 94 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rdx
    8086:	00 
    for val in vec {
    8087:	48 8b 4c 24 40       	mov    rcx,QWORD PTR [rsp+0x40]
    808c:	48 89 7c 24 38       	mov    QWORD PTR [rsp+0x38],rdi
    8091:	48 89 cf             	mov    rdi,rcx
    8094:	48 89 54 24 30       	mov    QWORD PTR [rsp+0x30],rdx
    8099:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
    809e:	e8 fd 76 00 00       	call   f7a0 <<&alloc::vec::Vec<T> as core::iter::traits::collect::IntoIterator>::into_iter>
    80a3:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    80a8:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    80ad:	eb 0f                	jmp    80be <main::part2+0x4e>
fn part2(vec : &Vec<u64>, target : u64) -> Result<u64, Error> {
    80af:	48 8b bc 24 b8 00 00 	mov    rdi,QWORD PTR [rsp+0xb8]
    80b6:	00 
    80b7:	e8 94 af ff ff       	call   3050 <_Unwind_Resume@plt>
    80bc:	0f 0b                	ud2    
    80be:	48 8b 44 24 20       	mov    rax,QWORD PTR [rsp+0x20]
    for val in vec {
    80c3:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    80c8:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    80cd:	48 89 4c 24 50       	mov    QWORD PTR [rsp+0x50],rcx
    80d2:	48 8d 7c 24 48       	lea    rdi,[rsp+0x48]
    80d7:	e8 74 61 00 00       	call   e250 <<core::slice::Iter<T> as core::iter::traits::iterator::Iterator>::next>
    80dc:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    80e1:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    80e6:	48 85 c0             	test   rax,rax
    80e9:	0f 95 c1             	setne  cl
    80ec:	0f b6 d1             	movzx  edx,cl
    80ef:	89 d0                	mov    eax,edx
    80f1:	74 04                	je     80f7 <main::part2+0x87>
    80f3:	eb 00                	jmp    80f5 <main::part2+0x85>
    80f5:	eb 22                	jmp    8119 <main::part2+0xa9>
    80f7:	31 f6                	xor    esi,esi
    80f9:	48 8d 05 b1 d0 00 00 	lea    rax,[rip+0xd0b1]        # 151b1 <str.2+0x21>
        if let Ok(sub_res) = part1(&vec, want) {
            return Ok(val * sub_res);
        }
    }

    Err(Error::new(ErrorKind::NotFound, "Solution not found"))
    8100:	48 8d 7c 24 78       	lea    rdi,[rsp+0x78]
    8105:	48 89 c2             	mov    rdx,rax
    8108:	b9 12 00 00 00       	mov    ecx,0x12
    810d:	e8 4e ae 00 00       	call   12f60 <std::io::error::Error::new>
    8112:	e9 c9 00 00 00       	jmp    81e0 <main::part2+0x170>
    for val in vec {
    8117:	0f 0b                	ud2    
    8119:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    811e:	48 89 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rax
    8125:	00 
    8126:	48 89 84 24 98 00 00 	mov    QWORD PTR [rsp+0x98],rax
    812d:	00 
    812e:	48 89 84 24 a0 00 00 	mov    QWORD PTR [rsp+0xa0],rax
    8135:	00 
    8136:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
        let want = target - val;
    813b:	48 89 c6             	mov    rsi,rax
    813e:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    8143:	e8 e8 10 00 00       	call   9230 <<u64 as core::ops::arith::Sub<&u64>>::sub>
    8148:	48 89 84 24 a8 00 00 	mov    QWORD PTR [rsp+0xa8],rax
    814f:	00 
    8150:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
        if let Ok(sub_res) = part1(&vec, want) {
    8155:	48 8b 74 24 40       	mov    rsi,QWORD PTR [rsp+0x40]
    815a:	48 8d 7c 24 60       	lea    rdi,[rsp+0x60]
    815f:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    8164:	e8 f7 fb ff ff       	call   7d60 <main::part1>
    8169:	48 83 7c 24 60 00    	cmp    QWORD PTR [rsp+0x60],0x0
    816f:	74 0c                	je     817d <main::part2+0x10d>
    }
    8171:	48 8d 7c 24 60       	lea    rdi,[rsp+0x60]
    8176:	e8 e5 3a 00 00       	call   bc60 <core::ptr::drop_in_place>
    817b:	eb 5e                	jmp    81db <main::part2+0x16b>
        if let Ok(sub_res) = part1(&vec, want) {
    817d:	48 8b 44 24 68       	mov    rax,QWORD PTR [rsp+0x68]
    8182:	48 89 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    8189:	00 
    818a:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
            return Ok(val * sub_res);
    818f:	48 89 c6             	mov    rsi,rax
    8192:	e8 69 10 00 00       	call   9200 <<&u64 as core::ops::arith::Mul<u64>>::mul>
    8197:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    819b:	eb 0d                	jmp    81aa <main::part2+0x13a>
    819d:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
}
    81a2:	48 81 c4 c8 00 00 00 	add    rsp,0xc8
    81a9:	c3                   	ret    
    81aa:	48 8b 44 24 38       	mov    rax,QWORD PTR [rsp+0x38]
    81af:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
            return Ok(val * sub_res);
    81b3:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
    81b7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    }
    81be:	48 8d 7c 24 60       	lea    rdi,[rsp+0x60]
    81c3:	e8 98 3a 00 00       	call   bc60 <core::ptr::drop_in_place>
    81c8:	eb 0f                	jmp    81d9 <main::part2+0x169>
    81ca:	48 8d 7c 24 60       	lea    rdi,[rsp+0x60]
    81cf:	e8 8c 3a 00 00       	call   bc60 <core::ptr::drop_in_place>
    81d4:	e9 d6 fe ff ff       	jmp    80af <main::part2+0x3f>
            return Ok(val * sub_res);
    81d9:	eb c2                	jmp    819d <main::part2+0x12d>
    for val in vec {
    81db:	e9 f2 fe ff ff       	jmp    80d2 <main::part2+0x62>
    Err(Error::new(ErrorKind::NotFound, "Solution not found"))
    81e0:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
    81e5:	48 8b 4c 24 38       	mov    rcx,QWORD PTR [rsp+0x38]
    81ea:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
    81ee:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    81f5:	00 
    81f6:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
    81fa:	48 c7 01 01 00 00 00 	mov    QWORD PTR [rcx],0x1
}
    8201:	eb 9a                	jmp    819d <main::part2+0x12d>
    8203:	48 89 84 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rax
    820a:	00 
    820b:	89 94 24 c0 00 00 00 	mov    DWORD PTR [rsp+0xc0],edx
    8212:	eb b6                	jmp    81ca <main::part2+0x15a>
    8214:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    821b:	00 00 00 
    821e:	66 90                	xchg   ax,ax

0000000000008220 <main::main>:

fn main() -> Result<(), Error> {
    8220:	48 81 ec f8 02 00 00 	sub    rsp,0x2f8
    8227:	48 89 f8             	mov    rax,rdi
    822a:	48 8d 0d 92 cf 00 00 	lea    rcx,[rip+0xcf92]        # 151c3 <str.2+0x33>
    let mut vec : Vec<u64> = read(File::open("input")?)?;
    8231:	48 8d 94 24 c8 00 00 	lea    rdx,[rsp+0xc8]
    8238:	00 
    8239:	48 89 7c 24 48       	mov    QWORD PTR [rsp+0x48],rdi
    823e:	48 89 d7             	mov    rdi,rdx
    8241:	48 89 ce             	mov    rsi,rcx
    8244:	ba 05 00 00 00       	mov    edx,0x5
    8249:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    824e:	e8 9d 05 00 00       	call   87f0 <std::fs::File::open>
    8253:	eb 0f                	jmp    8264 <main::main+0x44>
fn main() -> Result<(), Error> {
    8255:	48 8b bc 24 c0 02 00 	mov    rdi,QWORD PTR [rsp+0x2c0]
    825c:	00 
    825d:	e8 ee ad ff ff       	call   3050 <_Unwind_Resume@plt>
    8262:	0f 0b                	ud2    
    let mut vec : Vec<u64> = read(File::open("input")?)?;
    8264:	48 8d bc 24 b0 00 00 	lea    rdi,[rsp+0xb0]
    826b:	00 
    826c:	48 8d b4 24 c8 00 00 	lea    rsi,[rsp+0xc8]
    8273:	00 
    8274:	e8 17 c9 00 00       	call   14b90 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    8279:	8b 84 24 b0 00 00 00 	mov    eax,DWORD PTR [rsp+0xb0]
    8280:	89 c1                	mov    ecx,eax
    8282:	48 85 c9             	test   rcx,rcx
    8285:	74 06                	je     828d <main::main+0x6d>
    8287:	eb 00                	jmp    8289 <main::main+0x69>
    8289:	eb 23                	jmp    82ae <main::main+0x8e>
    828b:	eb c8                	jmp    8255 <main::main+0x35>
    828d:	8b 84 24 b4 00 00 00 	mov    eax,DWORD PTR [rsp+0xb4]
    8294:	89 84 24 d4 02 00 00 	mov    DWORD PTR [rsp+0x2d4],eax
    829b:	48 8d bc 24 90 00 00 	lea    rdi,[rsp+0x90]
    82a2:	00 
    82a3:	89 c6                	mov    esi,eax
    82a5:	e8 56 f8 ff ff       	call   7b00 <main::read>
    82aa:	eb 5e                	jmp    830a <main::main+0xea>
    82ac:	0f 0b                	ud2    
    82ae:	0f 10 84 24 b8 00 00 	movups xmm0,XMMWORD PTR [rsp+0xb8]
    82b5:	00 
    82b6:	0f 29 84 24 e0 00 00 	movaps XMMWORD PTR [rsp+0xe0],xmm0
    82bd:	00 
    82be:	0f 28 84 24 e0 00 00 	movaps xmm0,XMMWORD PTR [rsp+0xe0]
    82c5:	00 
    82c6:	0f 29 84 24 00 01 00 	movaps XMMWORD PTR [rsp+0x100],xmm0
    82cd:	00 
    82ce:	48 8d bc 24 f0 00 00 	lea    rdi,[rsp+0xf0]
    82d5:	00 
    82d6:	48 8d b4 24 00 01 00 	lea    rsi,[rsp+0x100]
    82dd:	00 
    82de:	e8 9d b7 00 00       	call   13a80 <<T as core::convert::From<T>>::from>
    82e3:	eb 0d                	jmp    82f2 <main::main+0xd2>
    82e5:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]

    println!("solution to 1st part: {}", part1(&vec, 2020)?);
    println!("solution to 2nd part: {}", part2(&vec, 2020)?);

    Ok(())
}
    82ea:	48 81 c4 f8 02 00 00 	add    rsp,0x2f8
    82f1:	c3                   	ret    
    82f2:	48 8d b4 24 f0 00 00 	lea    rsi,[rsp+0xf0]
    82f9:	00 
    82fa:	48 8b 7c 24 48       	mov    rdi,QWORD PTR [rsp+0x48]
    let mut vec : Vec<u64> = read(File::open("input")?)?;
    82ff:	e8 cc c7 00 00       	call   14ad0 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    8304:	eb 00                	jmp    8306 <main::main+0xe6>
    8306:	eb 00                	jmp    8308 <main::main+0xe8>
    8308:	eb db                	jmp    82e5 <main::main+0xc5>
    830a:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
    830f:	48 8d b4 24 90 00 00 	lea    rsi,[rsp+0x90]
    8316:	00 
    8317:	e8 a4 c8 00 00       	call   14bc0 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    831c:	eb 00                	jmp    831e <main::main+0xfe>
    831e:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
    8323:	48 85 c0             	test   rax,rax
    8326:	74 09                	je     8331 <main::main+0x111>
    8328:	eb 00                	jmp    832a <main::main+0x10a>
    832a:	eb 54                	jmp    8380 <main::main+0x160>
    832c:	e9 5a ff ff ff       	jmp    828b <main::main+0x6b>
    8331:	48 8b 84 24 88 00 00 	mov    rax,QWORD PTR [rsp+0x88]
    8338:	00 
    8339:	48 89 84 24 50 01 00 	mov    QWORD PTR [rsp+0x150],rax
    8340:	00 
    8341:	0f 10 44 24 78       	movups xmm0,XMMWORD PTR [rsp+0x78]
    8346:	0f 29 84 24 40 01 00 	movaps XMMWORD PTR [rsp+0x140],xmm0
    834d:	00 
    834e:	48 8b 84 24 50 01 00 	mov    rax,QWORD PTR [rsp+0x150]
    8355:	00 
    8356:	48 89 44 24 60       	mov    QWORD PTR [rsp+0x60],rax
    835b:	0f 28 84 24 40 01 00 	movaps xmm0,XMMWORD PTR [rsp+0x140]
    8362:	00 
    8363:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
    8368:	48 8d 7c 24 50       	lea    rdi,[rsp+0x50]
    vec.sort();
    836d:	e8 6e 6e 00 00       	call   f1e0 <<alloc::vec::Vec<T> as core::ops::deref::DerefMut>::deref_mut>
    8372:	48 89 54 24 38       	mov    QWORD PTR [rsp+0x38],rdx
    8377:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
    837c:	eb 5e                	jmp    83dc <main::main+0x1bc>
    let mut vec : Vec<u64> = read(File::open("input")?)?;
    837e:	0f 0b                	ud2    
    8380:	0f 10 44 24 78       	movups xmm0,XMMWORD PTR [rsp+0x78]
    8385:	0f 29 84 24 10 01 00 	movaps XMMWORD PTR [rsp+0x110],xmm0
    838c:	00 
    838d:	0f 28 84 24 10 01 00 	movaps xmm0,XMMWORD PTR [rsp+0x110]
    8394:	00 
    8395:	0f 29 84 24 30 01 00 	movaps XMMWORD PTR [rsp+0x130],xmm0
    839c:	00 
    839d:	48 8d bc 24 20 01 00 	lea    rdi,[rsp+0x120]
    83a4:	00 
    83a5:	48 8d b4 24 30 01 00 	lea    rsi,[rsp+0x130]
    83ac:	00 
    83ad:	e8 ce b6 00 00       	call   13a80 <<T as core::convert::From<T>>::from>
    83b2:	eb 00                	jmp    83b4 <main::main+0x194>
    83b4:	48 8d b4 24 20 01 00 	lea    rsi,[rsp+0x120]
    83bb:	00 
    83bc:	48 8b 7c 24 48       	mov    rdi,QWORD PTR [rsp+0x48]
    83c1:	e8 0a c7 00 00       	call   14ad0 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    83c6:	eb 00                	jmp    83c8 <main::main+0x1a8>
    83c8:	e9 3b ff ff ff       	jmp    8308 <main::main+0xe8>
}
    83cd:	48 8d 7c 24 50       	lea    rdi,[rsp+0x50]
    83d2:	e8 59 39 00 00       	call   bd30 <core::ptr::drop_in_place>
    83d7:	e9 79 fe ff ff       	jmp    8255 <main::main+0x35>
    83dc:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    83e1:	48 8b 74 24 38       	mov    rsi,QWORD PTR [rsp+0x38]
    vec.sort();
    83e6:	e8 55 ef ff ff       	call   7340 <alloc::slice::<impl [T]>::sort>
    83eb:	eb 00                	jmp    83ed <main::main+0x1cd>
    println!("solution to 1st part: {}", part1(&vec, 2020)?);
    83ed:	48 8b 35 64 45 01 00 	mov    rsi,QWORD PTR [rip+0x14564]        # 1c958 <__do_global_dtors_aux_fini_array_entry+0x3b8>
    83f4:	48 8d bc 24 c8 01 00 	lea    rdi,[rsp+0x1c8]
    83fb:	00 
    83fc:	48 8d 44 24 50       	lea    rax,[rsp+0x50]
    8401:	ba e4 07 00 00       	mov    edx,0x7e4
    8406:	48 89 74 24 28       	mov    QWORD PTR [rsp+0x28],rsi
    840b:	48 89 c6             	mov    rsi,rax
    840e:	e8 4d f9 ff ff       	call   7d60 <main::part1>
    8413:	eb 00                	jmp    8415 <main::main+0x1f5>
    8415:	48 8d bc 24 b0 01 00 	lea    rdi,[rsp+0x1b0]
    841c:	00 
    841d:	48 8d b4 24 c8 01 00 	lea    rsi,[rsp+0x1c8]
    8424:	00 
    8425:	e8 26 c7 00 00       	call   14b50 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    842a:	eb 00                	jmp    842c <main::main+0x20c>
    842c:	48 8b 84 24 b0 01 00 	mov    rax,QWORD PTR [rsp+0x1b0]
    8433:	00 
    8434:	48 85 c0             	test   rax,rax
    8437:	74 06                	je     843f <main::main+0x21f>
    8439:	eb 00                	jmp    843b <main::main+0x21b>
    843b:	eb 57                	jmp    8494 <main::main+0x274>
    843d:	eb 8e                	jmp    83cd <main::main+0x1ad>
    843f:	48 8b 84 24 b8 01 00 	mov    rax,QWORD PTR [rsp+0x1b8]
    8446:	00 
    8447:	48 89 84 24 d8 02 00 	mov    QWORD PTR [rsp+0x2d8],rax
    844e:	00 
    844f:	48 89 84 24 a8 01 00 	mov    QWORD PTR [rsp+0x1a8],rax
    8456:	00 
    8457:	48 8d 84 24 a8 01 00 	lea    rax,[rsp+0x1a8]
    845e:	00 
    845f:	48 89 84 24 a0 01 00 	mov    QWORD PTR [rsp+0x1a0],rax
    8466:	00 
    8467:	48 8b 84 24 a0 01 00 	mov    rax,QWORD PTR [rsp+0x1a0]
    846e:	00 
    846f:	48 89 84 24 e0 02 00 	mov    QWORD PTR [rsp+0x2e0],rax
    8476:	00 
    8477:	48 8b 35 92 4a 01 00 	mov    rsi,QWORD PTR [rip+0x14a92]        # 1cf10 <core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt>
    847e:	48 89 c7             	mov    rdi,rax
    8481:	e8 0a 2a 00 00       	call   ae90 <core::fmt::ArgumentV1::new>
    8486:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
    848b:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
    8490:	eb 5e                	jmp    84f0 <main::main+0x2d0>
    8492:	0f 0b                	ud2    
    8494:	0f 10 84 24 b8 01 00 	movups xmm0,XMMWORD PTR [rsp+0x1b8]
    849b:	00 
    849c:	0f 29 84 24 e0 01 00 	movaps XMMWORD PTR [rsp+0x1e0],xmm0
    84a3:	00 
    84a4:	0f 28 84 24 e0 01 00 	movaps xmm0,XMMWORD PTR [rsp+0x1e0]
    84ab:	00 
    84ac:	0f 29 84 24 00 02 00 	movaps XMMWORD PTR [rsp+0x200],xmm0
    84b3:	00 
    84b4:	48 8d bc 24 f0 01 00 	lea    rdi,[rsp+0x1f0]
    84bb:	00 
    84bc:	48 8d b4 24 00 02 00 	lea    rsi,[rsp+0x200]
    84c3:	00 
    84c4:	e8 b7 b5 00 00       	call   13a80 <<T as core::convert::From<T>>::from>
    84c9:	eb 00                	jmp    84cb <main::main+0x2ab>
    84cb:	48 8d b4 24 f0 01 00 	lea    rsi,[rsp+0x1f0]
    84d2:	00 
    84d3:	48 8b 7c 24 48       	mov    rdi,QWORD PTR [rsp+0x48]
    84d8:	e8 f3 c5 00 00       	call   14ad0 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    84dd:	eb 00                	jmp    84df <main::main+0x2bf>
    84df:	eb 00                	jmp    84e1 <main::main+0x2c1>
}
    84e1:	48 8d 7c 24 50       	lea    rdi,[rsp+0x50]
    84e6:	e8 45 38 00 00       	call   bd30 <core::ptr::drop_in_place>
    println!("solution to 1st part: {}", part1(&vec, 2020)?);
    84eb:	e9 f5 fd ff ff       	jmp    82e5 <main::main+0xc5>
    84f0:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    84f5:	48 89 84 24 90 01 00 	mov    QWORD PTR [rsp+0x190],rax
    84fc:	00 
    84fd:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
    8502:	48 89 8c 24 98 01 00 	mov    QWORD PTR [rsp+0x198],rcx
    8509:	00 
    850a:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
    8511:	00 
    8512:	ba 02 00 00 00       	mov    edx,0x2
    8517:	48 8d 8c 24 90 01 00 	lea    rcx,[rsp+0x190]
    851e:	00 
    851f:	41 b8 01 00 00 00    	mov    r8d,0x1
    8525:	48 8b 74 24 28       	mov    rsi,QWORD PTR [rsp+0x28]
    852a:	e8 81 2a 00 00       	call   afb0 <core::fmt::Arguments::new_v1>
    852f:	eb 00                	jmp    8531 <main::main+0x311>
    8531:	48 8b 05 68 49 01 00 	mov    rax,QWORD PTR [rip+0x14968]        # 1cea0 <std::io::stdio::_print>
    8538:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
    853f:	00 
    8540:	ff d0                	call   rax
    8542:	eb 00                	jmp    8544 <main::main+0x324>
    8544:	48 8d bc 24 b0 01 00 	lea    rdi,[rsp+0x1b0]
    854b:	00 
    854c:	e8 0f 37 00 00       	call   bc60 <core::ptr::drop_in_place>
    8551:	eb 00                	jmp    8553 <main::main+0x333>
    println!("solution to 2nd part: {}", part2(&vec, 2020)?);
    8553:	48 8b 35 26 44 01 00 	mov    rsi,QWORD PTR [rip+0x14426]        # 1c980 <__do_global_dtors_aux_fini_array_entry+0x3e0>
    855a:	48 8d bc 24 78 02 00 	lea    rdi,[rsp+0x278]
    8561:	00 
    8562:	48 8d 44 24 50       	lea    rax,[rsp+0x50]
    8567:	ba e4 07 00 00       	mov    edx,0x7e4
    856c:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    8571:	48 89 c6             	mov    rsi,rax
    8574:	e8 f7 fa ff ff       	call   8070 <main::part2>
    8579:	eb 00                	jmp    857b <main::main+0x35b>
    857b:	48 8d bc 24 60 02 00 	lea    rdi,[rsp+0x260]
    8582:	00 
    8583:	48 8d b4 24 78 02 00 	lea    rsi,[rsp+0x278]
    858a:	00 
    858b:	e8 c0 c5 00 00       	call   14b50 <<core::result::Result<T,E> as core::ops::try::Try>::into_result>
    8590:	eb 00                	jmp    8592 <main::main+0x372>
    8592:	48 8b 84 24 60 02 00 	mov    rax,QWORD PTR [rsp+0x260]
    8599:	00 
    859a:	48 85 c0             	test   rax,rax
    859d:	74 09                	je     85a8 <main::main+0x388>
    859f:	eb 00                	jmp    85a1 <main::main+0x381>
    85a1:	eb 59                	jmp    85fc <main::main+0x3dc>
    85a3:	e9 25 fe ff ff       	jmp    83cd <main::main+0x1ad>
    85a8:	48 8b 84 24 68 02 00 	mov    rax,QWORD PTR [rsp+0x268]
    85af:	00 
    85b0:	48 89 84 24 e8 02 00 	mov    QWORD PTR [rsp+0x2e8],rax
    85b7:	00 
    85b8:	48 89 84 24 58 02 00 	mov    QWORD PTR [rsp+0x258],rax
    85bf:	00 
    85c0:	48 8d 84 24 58 02 00 	lea    rax,[rsp+0x258]
    85c7:	00 
    85c8:	48 89 84 24 50 02 00 	mov    QWORD PTR [rsp+0x250],rax
    85cf:	00 
    85d0:	48 8b 84 24 50 02 00 	mov    rax,QWORD PTR [rsp+0x250]
    85d7:	00 
    85d8:	48 89 84 24 f0 02 00 	mov    QWORD PTR [rsp+0x2f0],rax
    85df:	00 
    85e0:	48 8b 35 29 49 01 00 	mov    rsi,QWORD PTR [rip+0x14929]        # 1cf10 <core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt>
    85e7:	48 89 c7             	mov    rdi,rax
    85ea:	e8 a1 28 00 00       	call   ae90 <core::fmt::ArgumentV1::new>
    85ef:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    85f4:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    85f8:	eb 52                	jmp    864c <main::main+0x42c>
    85fa:	0f 0b                	ud2    
    85fc:	0f 10 84 24 68 02 00 	movups xmm0,XMMWORD PTR [rsp+0x268]
    8603:	00 
    8604:	0f 29 84 24 90 02 00 	movaps XMMWORD PTR [rsp+0x290],xmm0
    860b:	00 
    860c:	0f 28 84 24 90 02 00 	movaps xmm0,XMMWORD PTR [rsp+0x290]
    8613:	00 
    8614:	0f 29 84 24 b0 02 00 	movaps XMMWORD PTR [rsp+0x2b0],xmm0
    861b:	00 
    861c:	48 8d bc 24 a0 02 00 	lea    rdi,[rsp+0x2a0]
    8623:	00 
    8624:	48 8d b4 24 b0 02 00 	lea    rsi,[rsp+0x2b0]
    862b:	00 
    862c:	e8 4f b4 00 00       	call   13a80 <<T as core::convert::From<T>>::from>
    8631:	eb 00                	jmp    8633 <main::main+0x413>
    8633:	48 8d b4 24 a0 02 00 	lea    rsi,[rsp+0x2a0]
    863a:	00 
    863b:	48 8b 7c 24 48       	mov    rdi,QWORD PTR [rsp+0x48]
    8640:	e8 8b c4 00 00       	call   14ad0 <<core::result::Result<T,E> as core::ops::try::Try>::from_error>
    8645:	eb 00                	jmp    8647 <main::main+0x427>
    8647:	e9 95 fe ff ff       	jmp    84e1 <main::main+0x2c1>
    864c:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    8650:	48 89 84 24 40 02 00 	mov    QWORD PTR [rsp+0x240],rax
    8657:	00 
    8658:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    865d:	48 89 8c 24 48 02 00 	mov    QWORD PTR [rsp+0x248],rcx
    8664:	00 
    8665:	48 8d bc 24 10 02 00 	lea    rdi,[rsp+0x210]
    866c:	00 
    866d:	ba 02 00 00 00       	mov    edx,0x2
    8672:	48 8d 8c 24 40 02 00 	lea    rcx,[rsp+0x240]
    8679:	00 
    867a:	41 b8 01 00 00 00    	mov    r8d,0x1
    8680:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    8685:	e8 26 29 00 00       	call   afb0 <core::fmt::Arguments::new_v1>
    868a:	eb 00                	jmp    868c <main::main+0x46c>
    868c:	48 8b 05 0d 48 01 00 	mov    rax,QWORD PTR [rip+0x1480d]        # 1cea0 <std::io::stdio::_print>
    8693:	48 8d bc 24 10 02 00 	lea    rdi,[rsp+0x210]
    869a:	00 
    869b:	ff d0                	call   rax
    869d:	eb 00                	jmp    869f <main::main+0x47f>
    869f:	48 8d bc 24 60 02 00 	lea    rdi,[rsp+0x260]
    86a6:	00 
    86a7:	e8 b4 35 00 00       	call   bc60 <core::ptr::drop_in_place>
    86ac:	eb 00                	jmp    86ae <main::main+0x48e>
    86ae:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    Ok(())
    86b3:	c6 00 03             	mov    BYTE PTR [rax],0x3
}
    86b6:	48 8d 7c 24 50       	lea    rdi,[rsp+0x50]
    86bb:	e8 70 36 00 00       	call   bd30 <core::ptr::drop_in_place>
    86c0:	e9 20 fc ff ff       	jmp    82e5 <main::main+0xc5>
    86c5:	48 89 84 24 c0 02 00 	mov    QWORD PTR [rsp+0x2c0],rax
    86cc:	00 
    86cd:	89 94 24 c8 02 00 00 	mov    DWORD PTR [rsp+0x2c8],edx
    86d4:	e9 b2 fb ff ff       	jmp    828b <main::main+0x6b>
    86d9:	48 89 84 24 c0 02 00 	mov    QWORD PTR [rsp+0x2c0],rax
    86e0:	00 
    86e1:	89 94 24 c8 02 00 00 	mov    DWORD PTR [rsp+0x2c8],edx
    86e8:	e9 3f fc ff ff       	jmp    832c <main::main+0x10c>
    86ed:	48 89 84 24 c0 02 00 	mov    QWORD PTR [rsp+0x2c0],rax
    86f4:	00 
    86f5:	89 94 24 c8 02 00 00 	mov    DWORD PTR [rsp+0x2c8],edx
    86fc:	e9 cc fc ff ff       	jmp    83cd <main::main+0x1ad>
    8701:	48 89 84 24 c0 02 00 	mov    QWORD PTR [rsp+0x2c0],rax
    8708:	00 
    8709:	89 94 24 c8 02 00 00 	mov    DWORD PTR [rsp+0x2c8],edx
    8710:	e9 28 fd ff ff       	jmp    843d <main::main+0x21d>
    8715:	48 89 84 24 c0 02 00 	mov    QWORD PTR [rsp+0x2c0],rax
    871c:	00 
    871d:	89 94 24 c8 02 00 00 	mov    DWORD PTR [rsp+0x2c8],edx
    8724:	e9 7a fe ff ff       	jmp    85a3 <main::main+0x383>
    8729:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000008730 <main>:
    8730:	48 83 ec 18          	sub    rsp,0x18
    8734:	8a 05 b8 ce 00 00    	mov    al,BYTE PTR [rip+0xceb8]        # 155f2 <__rustc_debug_gdb_scripts_section__>
    873a:	48 63 cf             	movsxd rcx,edi
    873d:	48 8d 3d dc fa ff ff 	lea    rdi,[rip+0xfffffffffffffadc]        # 8220 <main::main>
    8744:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    8749:	48 89 ce             	mov    rsi,rcx
    874c:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
    8751:	88 44 24 0f          	mov    BYTE PTR [rsp+0xf],al
    8755:	e8 e6 2f 00 00       	call   b740 <std::rt::lang_start>
    875a:	48 83 c4 18          	add    rsp,0x18
    875e:	c3                   	ret    
    875f:	90                   	nop

[....]
